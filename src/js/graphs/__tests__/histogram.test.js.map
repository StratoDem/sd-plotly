{"version":3,"sources":["../../../es6/graphs/__tests__/histogram.test.jsx"],"names":[],"mappings":"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","file":"histogram.test.js","sourcesContent":["/** @flow\n * StratoDem Analytics : histogram.test\n * Principal Author(s) : Michael Clawar\n * Secondary Author(s) :\n * Description :\n *\n *  (c) 2016- StratoDem Analytics, LLC\n *  All Rights Reserved\n */\n\nimport Immutable from 'immutable';\nimport React from 'react';\n\nimport { shallow } from 'enzyme';\nimport DataFrame from 'pandas-js/dist/core/frame';\nimport Series from 'pandas-js/dist/core/series';\n\n// --- LOCAL IMPORTS --- //\nimport SDPlot from '../../core/_sdplot';\nimport HistogramPlot from '../histogram';\n\n\ndescribe('<HistogramPlot />', () => {\n  describe('rendering', () => {\n    it('Renders properly', () => {\n      const data = new DataFrame(Immutable.Map({\n        x: new Series([1, 2, 3, 4]),\n      }));\n      const plot = shallow(<HistogramPlot\n        id=\"test-id\"\n        className=\"main-graph\"\n        data={data}\n        yNames={['x']}\n      />);\n\n      expect(plot.find(SDPlot).length).toEqual(1);\n      expect(plot.find(SDPlot).props().id).toEqual('test-id');\n    });\n\n    it('Has the right data after render', () => {\n      const data = new DataFrame(Immutable.Map({\n        x: new Series([1, 2, 3, 4]),\n      }));\n      const plot = shallow(<HistogramPlot\n        id=\"test-id\"\n        className=\"main-graph\"\n        data={data}\n        yNames={['x']}\n      />);\n      const chartJSON = plot.find(SDPlot).shallow().instance().chartData;\n\n      expect(chartJSON).toBeInstanceOf(Array);\n      expect(chartJSON.length).toEqual(1);\n      expect(chartJSON[0]).toBeInstanceOf(Object);\n\n      expect(chartJSON[0].x).toEqual([0, 1, 2, 3]);\n      expect(chartJSON[0].y).toEqual([1, 2, 3, 4]);\n    });\n  });\n\n  describe('layout', () => {\n    const title = 'Test title';\n    const fontFamily = 'Test font family';\n    const fontScale = 2;\n    const fontColor = 'blue';\n    const showLegend = true;\n    const secondaryAxis = false;\n    const paperBackgroundColor = 'black';\n    const plotBackgroundColor = 'red';\n\n    const xLabel = 'Test x label';\n    const xTicksReverse = false;\n    const xTicksRotation = 0;\n    const horizontalLines = true;\n    const verticalLines = false;\n    const gridColor = 'orange';\n    const xTicksPrefix = 'test x prefix';\n    const xType = '.1%';\n    const xTicksFormat = '.0%';\n    const xRangemode = 'tozero';\n\n    const yLabel = 'Test y label';\n    const yTicksReverse = false;\n    const yTicksRotation = 0;\n    const yTicksPrefix = 'test y prefix';\n    const yType = '.1%';\n    const yTicksFormat = '.0%';\n    const yRangemode = 'tozero';\n    const yHoverFormat = '.2f';\n\n    const legendLocation = 'topright';\n    const legendBackgroundColor = 'pink';\n    const legendBorderColor = 'orange-red';\n\n    const data = new DataFrame(Immutable.Map({\n      x: new Series([1, 2, 3, 4]),\n    }));\n\n    const plot = shallow(<HistogramPlot\n      id=\"test-id\"\n      className=\"main-graph\"\n      data={data}\n      yNames={['x']}\n      title={title}\n      fontFamily={fontFamily}\n      fontScale={fontScale}\n      fontColor={fontColor}\n      showLegend={showLegend}\n      secondaryAxis={secondaryAxis}\n      paperBackgroundColor={paperBackgroundColor}\n      plotBackgroundColor={plotBackgroundColor}\n      xLabel={xLabel}\n      xTicksReverse={xTicksReverse}\n      xTicksRotation={xTicksRotation}\n      xTicksPrefix={xTicksPrefix}\n      verticalLines={verticalLines}\n      horizontalLines={horizontalLines}\n      gridColor={gridColor}\n      xType={xType}\n      xTicksFormat={xTicksFormat}\n      xRangemode={xRangemode}\n\n      yLabel={yLabel}\n      yTicksReverse={yTicksReverse}\n      yTicksRotation={yTicksRotation}\n      yTicksPrefix={yTicksPrefix}\n      yType={yType}\n      yTicksFormat={yTicksFormat}\n      yRangemode={yRangemode}\n      yHoverFormat={yHoverFormat}\n\n      legendLocation={legendLocation}\n      legendBackgroundColor={legendBackgroundColor}\n      legendBorderColor={legendBorderColor}\n    />);\n\n    const plotInstance = plot.find(SDPlot).shallow().instance();\n\n    it('has the correct layout', () => {\n      const chartLayout = plotInstance.layout;\n      expect(chartLayout).toBeInstanceOf(Object);\n\n      expect(chartLayout.title).toEqual(title);\n      expect(chartLayout.font.family).toEqual(fontFamily);\n      expect(chartLayout.font.size).toEqual(fontScale * 16);\n      expect(chartLayout.font.color).toEqual(fontColor);\n      expect(chartLayout.yaxis2).toBeUndefined();\n      expect(chartLayout.paper_bg_color).toEqual(paperBackgroundColor);\n      expect(chartLayout.plot_bg_color).toEqual(plotBackgroundColor);\n      expect(chartLayout.showlegend).toEqual(showLegend);\n      expect(chartLayout.xaxis).toEqual(plotInstance.xAxisStyle);\n      expect(chartLayout.yaxis).toEqual(plotInstance.yAxisStyle);\n    });\n\n    it('has the proper x axis styling', () => {\n      const xAxisStyle = plotInstance.xAxisStyle;\n      expect(xAxisStyle).toBeInstanceOf(Object);\n\n      expect(xAxisStyle.title).toEqual(xLabel);\n      expect(xAxisStyle.autorange).toEqual(true);\n      expect(xAxisStyle.titlefont.size).toEqual(fontScale * 14);\n      expect(xAxisStyle.tickangle).toEqual(360);\n      expect(xAxisStyle.tickfont.size).toEqual(fontScale * 11);\n      expect(xAxisStyle.gridcolor).toEqual(paperBackgroundColor);\n      expect(xAxisStyle.tickprefix).toEqual(xTicksPrefix);\n      expect(xAxisStyle.type).toEqual(xType);\n      expect(xAxisStyle.tickformat).toEqual(xTicksFormat);\n      expect(xAxisStyle.rangemode).toEqual(xRangemode);\n    });\n\n    it('has the proper y axis styling', () => {\n      const yAxisStyle = plotInstance.yAxisStyle;\n      expect(yAxisStyle).toBeInstanceOf(Object);\n\n      expect(yAxisStyle.title).toEqual(yLabel);\n      expect(yAxisStyle.autorange).toEqual(true);\n      expect(yAxisStyle.titlefont.size).toEqual(fontScale * 14);\n      expect(yAxisStyle.tickangle).toEqual(360);\n      expect(yAxisStyle.tickfont.size).toEqual(fontScale * 11);\n      expect(yAxisStyle.gridcolor).toEqual(gridColor);\n      expect(yAxisStyle.tickprefix).toEqual(yTicksPrefix);\n      expect(yAxisStyle.type).toEqual(yType);\n      expect(yAxisStyle.tickformat).toEqual(yTicksFormat);\n      expect(yAxisStyle.hoverformat).toEqual(yHoverFormat);\n      expect(yAxisStyle.rangemode).toEqual(yRangemode);\n    });\n\n    it('has the proper legend', () => {\n      const legend = plotInstance.legend;\n      expect(legend).toBeInstanceOf(Object);\n\n      expect(legend.x).toEqual(1);\n      expect(legend.y).toEqual(1);\n      expect(legend.font.size).toEqual(fontScale * 14);\n      expect(legend.bgcolor).toEqual(legendBackgroundColor);\n      expect(legend.bordercolor).toEqual(legendBorderColor);\n    });\n\n    it('has the proper margin', () => {\n      const margin = plotInstance.margin;\n      expect(margin).toBeInstanceOf(Object);\n\n      expect(margin.l).toEqual(60);\n      expect(margin.t).toEqual(20);\n      expect(margin.r).toEqual(10);\n      expect(margin.b).toEqual(50);\n      expect(margin.pad).toEqual(0);\n    });\n  });\n\n  describe('React Lifecycle Methods', () => {\n    describe('shouldComponentUpdate', () => {\n      const data = new DataFrame(Immutable.Map({\n        x: new Series([1, 2, 3, 4]),\n      }));\n      const plot = shallow(<HistogramPlot\n        id=\"test-id\"\n        className=\"main-graph\"\n        data={data}\n        yNames={['x']}\n      />);\n\n      it('Returns false if the DataFrame is equal', () => {\n        const plotInstance = plot.find(SDPlot).shallow().instance();\n\n        expect(plotInstance.shouldComponentUpdate({data})).toEqual(false);\n      });\n\n      it('Returns true if the DataFrame is different', () => {\n        const plotInstance = plot.find(SDPlot).shallow().instance();\n\n        expect(plotInstance.shouldComponentUpdate({\n          data: new DataFrame([{x: 1}]),\n        })).toEqual(true);\n      });\n    });\n  });\n});\n"]}