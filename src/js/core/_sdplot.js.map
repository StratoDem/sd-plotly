{"version":3,"sources":["../../es6/core/_sdplot.jsx"],"names":[],"mappings":"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","file":"_sdplot.js","sourcesContent":["/** @flow\n * StratoDem Analytics : _sdplot\n * Principal Author(s) : Michael Clawar\n * Secondary Author(s) :\n * Description :\n *\n *  (c) 2016- StratoDem Analytics, LLC\n *  All Rights Reserved\n */\n\nimport debounce from 'lodash/debounce';\nimport React, { Element } from 'react';\n\nimport DataFrame from 'pandas-js/dist/core/frame';\nimport Series from 'pandas-js/dist/core/series';\n\n// --- LOCAL IMPORTS --- //\nimport * as constants from './constants';\nimport Plotly from './_plotly';\nimport * as utils from './utils';\n\n\n// --- TYPES --- //\ntype T_AXIS = {\n  title: string,\n  autorange: 'reversed' | true,\n  titlefont: {size: number},\n  tickangle: number,\n  tickfont: {size: number},\n  gridcolor: string,\n  tickprefix: string,\n  type: string,\n  tickformat: string,\n  hoverformat?: string,\n  rangemode: 'tozero' | 'nonnegative' | 'normal',\n  showticklabels: boolean,\n};\ntype T_AXIS_SECONDARY = T_AXIS & {\n  overlaying: 'y',\n  side: 'right',\n};\ntype T_LEGEND = {\n  x: number,\n  y: number,\n  font: {size: number},\n  bgcolor: string,\n  bordercolor: string,\n}\ntype T_MARGIN = {\n  l: number,\n  t: number,\n  r: number,\n  b: number,\n  pad: number\n}\ntype T_LAYOUT = {\n  title: string,\n  paper_bg_color: string,\n  height?: number,\n  width?: number,\n  plot_bg_color: string,\n  barmode?: 'relative' | 'group' | 'stack',\n  bargap?: number,\n  font: {family: string, size: number, color: string},\n  xaxis: T_AXIS,\n  yaxis: T_AXIS,\n  legend: T_LEGEND,\n  margin: T_MARGIN,\n  showlegend: boolean,\n  yaxis2?: T_AXIS_SECONDARY,\n  height?: number,\n  width?: number,\n};\n\n\n// --- COMPONENT DEFINITION --- //\nexport type Props = {\n  /** Div id with which to render the SDPlot */\n  id: string,\n  /** Data to render in the plot */\n  data: DataFrame | Series,\n  /** class to give to SDPlot div */\n  className: string,\n  /** Type of chart */\n  chartType: 'bar' | 'scatter' | 'scattergl',\n  /** Types of each of the traces in the plot */\n  traceTypes: Array<string>,\n  /** Title of the chart */\n  title: string,\n  /** Names for each of the traces */\n  traceNames: Array<string>,\n  /** Include a secondary axis? */\n  secondaryAxis: boolean,\n  /** Type of bar chart to plot */\n  barmode?: 'relative' | 'group' | 'stack',\n  /** Hover info format https://plot.ly/javascript/reference/#scatter-hoverinfo */\n  hoverinfo?: string,\n  /** Gap between the bars in barplot */\n  bargap?: number,\n  /** Array of colors to use for the traces */\n  palette: Array<string>,\n  /** Plot.ly configuration object */ // eslint-disable-next-line\n  configuration: {modeBarButtonsToRemove: Array<string>},\n  /** Height of plot, in pixels */\n  height?: number,\n  /** Width of plot, in pixels */\n  width?: number,\n\n  /** Name of the x data series */\n  xName?: string,\n  /** Label for the x data series to display */\n  xLabel: string,\n  /** Array of tick labels to use */\n  xTickLabels: Array<string | number>,\n  /** Rotation of x tick labels */\n  xTicksRotation: number,\n  /** Reverse the x axis? */\n  xTicksReverse: boolean,\n  /** Prefix to use for x ticks */\n  xTicksPrefix: string,\n  /** d3 formatting string to format x ticks */\n  xTicksFormat: string,\n  /** d3 formatting string to format x values */\n  xType: string,\n  /** Type of range to use for the x axis */\n  xRangemode: 'tozero' | 'nonnegative' | 'normal',\n  /** x data is a datetime? */\n  xIsDate: boolean,\n  /** Show x-axis tick labels? */\n  xShowTickLabels: boolean,\n\n  /** Names of the y data series */\n  yNames: Array<string>,\n  /** Label for the y data series to display */\n  yLabel: string,\n  /** Rotation of y tick labels */\n  yTicksRotation: number,\n  /** Reverse the y axis? */\n  yTicksReverse: boolean,\n  /** Prefix to use for y ticks */\n  yTicksPrefix: string,\n  /** d3 formatting string to format y ticks */\n  yTicksFormat: string,\n  /** d3 formatting string to format y values on hover */\n  yHoverFormat: string,\n  /** d3 formatting string to format y values */\n  yType: string,\n  /** Type of range to use for the y axis */\n  yRangemode: 'tozero' | 'nonnegative' | 'normal',\n  /** Show y-axis tick labels? */\n  yShowTickLabels: boolean,\n\n  /** Padding in pixels */\n  padding: number,\n  /** Display horizontal lines on the chart? */\n  horizontalLines: boolean,\n  /** Display vertical lines on the chart? */\n  verticalLines: boolean,\n  /** Color to make horizontal/vertical lines on the chart */\n  gridColor: string,\n  /** Color of plot background */\n  plotBackgroundColor: string,\n  /** Color of paper background */\n  paperBackgroundColor: string,\n  /** Orientation of chart */\n  orientation: 'v' | 'h',\n  /** Opacity of data points */\n  opacity: number,\n\n  /** Left margin for the plot */\n  marginLeft: number,\n  /** Top margin for the plot */\n  marginTop: number,\n  /** Right margin for the plot */\n  marginRight: number,\n  /** Bottom margin for the plot */\n  marginBottom: number,\n\n  /** Display the legend for the chart? */\n  showLegend: boolean,\n  /** Location of the chart legend, if displayed */\n  legendLocation: 'topleft' | 'topright' | 'bottomleft' | 'bottomright',\n  /** Background color for the chart legend, if displayed */\n  legendBackgroundColor: string,\n  /** Border color for the chart legend, if displayed */\n  legendBorderColor: string,\n\n  /** Name of the font family to use for text */\n  fontFamily: string,\n  /** Scaling factor for the font, relative to 1 */\n  fontScale: number,\n  /** Color to use for the font */\n  fontColor: string,\n\n  /** Display a secondary axis? */\n  secondaryAxis?: boolean,\n\n  /** ms gap during which only the latest window resize event should cause a redraw */\n  resizeDebounce: number,\n\n  /** ms gap during which only the latest redraw requested should occur */\n  redrawDebounce: number,\n\n  /** Display the modebar? */\n  displayModeBar: boolean,\n};\n\n/** SDPlot | The base React Plotly component for plots */\nexport default class SDPlot extends React.Component {\n  props: Props;\n  plotComponent: Element<*>;\n  redraw: () => void;\n\n  static defaultProps = {\n    ...constants.CHART_STYLE_DEFAULTS,\n    ...constants.X_AXIS_STYLE_DEFAULTS,\n    ...constants.Y_AXIS_STYLE_DEFAULTS,\n    ...constants.PAPER_STYLE_DEFAULTS,\n    ...constants.LEGEND_STYLE_DEFAULTS,\n    ...constants.FONT_STYLE_DEFAULTS,\n  };\n\n  constructor(props: Props) {\n    super(props);\n\n    this.redraw = debounce(this._redraw, props.redrawDebounce);\n  }\n\n  // ***** React lifecycle methods ***** //\n  componentDidMount(): void {\n    this.redraw();\n  }\n\n  shouldComponentUpdate(nextProps: Props): boolean {\n    const dataEqual = nextProps.data.values === this.props.data.values;\n    const columnsEqual = nextProps.data.columns === this.props.data.columns;\n    const indexEqual = nextProps.data.index === this.props.data.index;\n\n    return !dataEqual || !columnsEqual || !indexEqual;\n  }\n\n  componentDidUpdate(prevProps: Props): void {\n    if (this.props.redrawDebounce !== prevProps.redrawDebounce)\n      this.redraw = debounce(this._redraw, this.props.redrawDebounce);\n\n    this.redraw();\n  }\n\n  toString(): string {\n    return `SDPlot<${this.props.id}>`;\n  }\n\n  /** Resize the plot on window resize events */\n  plotlyResize(): void {\n    const thisNode = this.plotComponent;\n    window.addEventListener('resize',\n      debounce(() => Plotly.Plots.resize(thisNode), this.props.resizeDebounce));\n  }\n\n  /** Redraw the chart when data is updated */\n  _redraw(): void {\n    const { id, configuration, displayModeBar } = this.props;\n\n    if (document.getElementById(id) !== null) {\n      Plotly.newPlot(id, this.chartData, this.layout,\n        displayModeBar ? configuration : {displayModeBar});\n      this.plotlyResize();\n    }\n  }\n\n  // --- GETTERS --- //\n  /** Plotly layout object */\n  get layout(): T_LAYOUT {\n    const { title, paperBackgroundColor, plotBackgroundColor, barmode,\n      fontFamily, fontScale, fontColor, secondaryAxis, showLegend, bargap,\n      height, width } = this.props;\n\n    const layout = {\n      title,\n      paper_bg_color: paperBackgroundColor,\n      plot_bg_color: plotBackgroundColor,\n      barmode,\n      bargap,\n      height,\n      width,\n      font: {family: fontFamily, size: fontScale * constants.BASE_FONT_SIZE, color: fontColor},\n      xaxis: this.xAxisStyle,\n      yaxis: this.yAxisStyle,\n      legend: this.legend,\n      margin: this.margin,\n      showlegend: showLegend,\n    };\n\n    if (secondaryAxis) {\n      // $FlowFixMe\n      layout.yaxis2 = this.secondaryAxis;\n    }\n    return layout;\n  }\n\n  /** Plotly x-axis style object */\n  get xAxisStyle(): T_AXIS {\n    const { xLabel, xTicksReverse, fontScale, xTicksRotation, verticalLines,\n      gridColor, paperBackgroundColor, xTicksPrefix, xType, xTicksFormat, xRangemode,\n      xShowTickLabels } = this.props;\n\n    let autorange;\n    if (xTicksReverse) autorange = 'reversed';\n    else autorange = true;\n\n    return {\n      title: xLabel,\n      autorange,\n      titlefont: {size: fontScale * constants.TITLE_FONT_SIZE},\n      tickangle: constants.STARTING_FIXED_ROTATION - xTicksRotation,\n      tickfont: {size: fontScale * constants.TICK_FONT_SIZE},\n      gridcolor: verticalLines ? gridColor : paperBackgroundColor,\n      tickprefix: xTicksPrefix,\n      type: xType,\n      tickformat: xTicksFormat,\n      rangemode: xRangemode,\n      showticklabels: xShowTickLabels,\n    };\n  }\n\n  /** Plotly y-axis style object */\n  get yAxisStyle(): T_AXIS {\n    const { yLabel, yTicksReverse, fontScale, yTicksRotation, horizontalLines,\n      gridColor, paperBackgroundColor, yTicksPrefix, yType, yTicksFormat,\n      yHoverFormat, yRangemode, yShowTickLabels } = this.props;\n\n    let autorange;\n    if (yTicksReverse) autorange = 'reversed';\n    else autorange = true;\n\n    return {\n      title: yLabel,\n      autorange,\n      titlefont: {size: fontScale * constants.TITLE_FONT_SIZE},\n      tickangle: constants.STARTING_FIXED_ROTATION - yTicksRotation,\n      tickfont: {size: fontScale * constants.TICK_FONT_SIZE},\n      gridcolor: horizontalLines ? gridColor : paperBackgroundColor,\n      tickprefix: yTicksPrefix,\n      type: yType,\n      tickformat: yTicksFormat,\n      hoverformat: yHoverFormat,\n      rangemode: yRangemode,\n      showticklabels: yShowTickLabels,\n    };\n  }\n\n  /** Plotly legend style object */\n  get legend(): T_LEGEND {\n    const { chartType, legendLocation, fontScale, legendBackgroundColor,\n      legendBorderColor } = this.props;\n    return {\n      x: chartType === 'multiple' ? constants.LEGEND_LOCATIONS[legendLocation].x : 1,\n      y: constants.LEGEND_LOCATIONS[legendLocation].y,\n      font: {size: fontScale * constants.TITLE_FONT_SIZE},\n      bgcolor: legendBackgroundColor,\n      bordercolor: legendBorderColor,\n    };\n  }\n\n  /** Plotly margin style object */\n  get margin(): T_MARGIN {\n    const { padding, marginLeft, marginRight, marginTop, marginBottom } = this.props;\n    return {\n      l: marginLeft,\n      t: marginTop,\n      r: marginRight,\n      b: marginBottom,\n      pad: padding,\n    };\n  }\n\n  /** Plotly secondary axis style object */\n  get secondaryAxis(): T_AXIS_SECONDARY {\n    const yAxis2 = {...this.yAxisStyle};\n    yAxis2.tickangle = constants.STARTING_FIXED_ROTATION - this.props.yTicksRotation;\n    yAxis2.overlaying = 'y';\n    yAxis2.title = '';\n    yAxis2.side = 'right';\n\n    return yAxis2;\n  }\n\n  /** Convert the Immutable.List passed in to the appropriate array format for Plotly.js */\n  get chartData(): Array<constants.T_TRACE> {\n    const { chartType } = this.props;\n\n    if (chartType === 'multiple')\n      return this.chartDataMultiple;\n\n    const { data, traceNames, orientation, xName, xIsDate, xTickLabels,\n      palette, secondaryAxis, opacity, yNames, hoverinfo } = this.props;\n\n    if (data.length === 0) // If we have empty data, let's just skip quickly\n      return [];\n\n    let xDate = false;\n    if (typeof xName !== 'undefined')\n      xDate = xName.toUpperCase() === 'DATE';\n    else xDate = xIsDate;\n\n    const yaxis = this.yAxisStyle;\n\n    if (data instanceof Series) {\n      // Only plotting one data series\n      let xVals;\n      if (typeof xTickLabels === 'undefined')\n        xVals = xTickLabels;\n      else if (xDate)\n        xVals = data.index.map(v => utils.dateFromISO(v)).toArray();\n      else\n        xVals = data.index.toArray();\n\n      return [\n        constants.dataToTrace({\n          xVals: orientation === 'v' ? xVals : data.values.toArray(),\n          yVals: orientation === 'v' ? data.values.toArray() : xVals,\n          traceName: traceNames[0],\n          color: palette[0],\n          chartType,\n          orientation,\n          yaxis,\n          markerColor: palette[0],\n          secondaryAxis,\n          opacity,\n          hoverinfo,\n        })];\n    } else if (data instanceof DataFrame) {\n      // Potentially plotting multiple data series\n      let xVals;\n\n      if (typeof xName === 'undefined') {\n        xVals = xDate\n          ? data.index.map(v => utils.dateFromISO(v)).toArray()\n          : data.index.toArray();\n      } else {\n        xVals = xDate\n          ? data.get(xName).values.map(v => utils.dateFromISO(v)).toArray()\n          : data.get(xName).values.toArray();\n      }\n\n      return yNames.map((yName, idx) => constants.dataToTrace({\n        xVals,\n        yVals: data.get(yName).values.toArray(),\n        traceName: traceNames[idx],\n        color: palette[idx],\n        chartType,\n        orientation,\n        yaxis,\n        markerColor: palette[idx],\n        secondaryAxis,\n        opacity,\n        hoverinfo}));\n    }\n    throw new Error('Must be either pandas.Series or pandas.DataFrame');\n  }\n\n  /** Convert the Immutable.List for multiple plot to the appropriate array format for Plotly.js */\n  get chartDataMultiple(): Array<constants.T_TRACE> {\n    const { traceNames, traceTypes, data, yNames, xName, palette,\n      orientation, opacity } = this.props;\n\n    if (data instanceof DataFrame && typeof xName === 'string') {\n      const xVals = xName.toUpperCase() === 'DATE'\n        ? data.index.map(v => utils.dateFromISO(v)).toArray()\n        : data.index.toArray();\n      return yNames.map((yName, idx) => constants.dataToTrace({\n        xVals,\n        yVals: data.get(yName).values.toArray(),\n        traceName: traceNames[idx],\n        color: palette[idx],\n        opacity,\n        chartType: traceTypes[idx],\n        orientation,\n        yaxis: idx === 1 ? 'y2' : 'y1',\n        markerColor: palette[idx],\n        secondaryAxis: idx === 1}));\n    }\n\n    throw new Error('Multiple chart must be a DataFrame');\n  }\n\n  render() {\n    const { className, id } = this.props;\n    return (\n      <div className={className}>\n        <div\n          ref={(component) => { this.plotComponent = component; }}\n          id={id}\n          className={`${className}-inner`}\n        />\n      </div>\n    );\n  }\n}\n"]}